/* 
 * QDAMC Utility Functions
 */

#ifndef __QDAMC_UTILS_H__
#define __QDAMC_UTILS_H__

#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <math.h>
#include "../qdamc_cli.h"
#include "../ecodes.h"

/* utility functions */
inline int compare_floats(const void *a, const void *b) {
    pfloat temp = *((pfloat *) a)-*((pfloat *) b);
    if (temp > 0.0f) return 1;
    else if (temp < 0.0f) return -1;
    else return 0;
}

inline int rcompare_floats(const void *a, const void *b) {
    return -compare_floats(a, b);
}

inline int compare_ints(const void *a, const void *b) {
    int temp = *((int *) a)-*((int *) b);
    if (temp > 0) return 1;
    else if (temp < 0) return -1;
    else return 0;
}

inline int rcompare_ints(const void *a, const void *b) {
    return -compare_ints(a, b);
}

/* Generates a uniform random number on the range [0,1) */
inline pfloat unirand_0_1() {
    return (pfloat)rand() / RAND_MAX;
}


/* Generates a uniform random number on the range [low, high) */
inline pfloat unirand_1_1() {
    return (pfloat)rand() / RAND_MAX * 2 - 1;
}

/* Generates a uniform random number on the range [low, high) */
inline pfloat unirand(pfloat low, pfloat high) {
    return (pfloat)rand() / RAND_MAX * (high - low) + low;
}

inline int intsum(int * array, int count) {
    int i;
    int sum = 0;
    for (i = 0; i < count; i++) {
        sum += array[i];
    }
    return sum;
}

inline pfloat floatsum(pfloat * array, int count) {
    int i;
    pfloat sum = 0.0;
    for (i = 0; i < count; i++) {
        sum += array[i];
    }
    return sum;
}

inline pfloat maxFAS(pfloat * array, int leng, int stride) {
    pfloat max = array[0];
    int i;
    for (i = 0; i < leng; i += stride) {
        if (array[i] > max) max = array[i];
        //       printf("MAX= %f\n", max);
    }
    return max;
}

inline pfloat maxFA(pfloat * array, int leng) {
    return maxFAS(array, leng, 1);
}

inline pfloat rel_diff_calc(int nx, pfloat * phi, pfloat * phi_old) {
    pfloat * rel_diff = (pfloat *) calloc(nx, sizeof (pfloat));
    int i;
    for (i = 0; i < nx; i++) {
        rel_diff[i] = fabs((phi[i] - phi_old[i]) / phi[i]);
    }
    pfloat max = maxFA(rel_diff, nx);
    free(rel_diff);
    //printf("The relative difference between the scalar flux is, %f\n", max);
    return max;
}

/* for L2 norm */

// read in analytical solution, dataset 1 (Lx = 100, nx = 100, sigt = 10, sigs = 0.999)
inline void init_L2_norm_1(afloat * anal_soln){
	afloat anal_data[] = {91.15
									, 236.09
									, 357.65
									, 459.89
									, 545.85
									, 618.13
									, 678.91
									, 730.01
									, 772.98
									, 809.11
									, 839.49
									, 865.04
									, 886.52
									, 904.58
									, 919.77
									, 932.54
									, 943.27
									, 952.3
									, 959.89
									, 966.28
									, 971.64
									, 976.16
									, 979.95
									, 983.14
									, 985.82
									, 988.08
									, 989.98
									, 991.57
									, 992.91
									, 994.04
									, 994.98
									, 995.78
									, 996.45
									, 997.01
									, 997.48
									, 997.88
									, 998.21
									, 998.49
									, 998.72
									, 998.92
									, 999.08
									, 999.22
									, 999.33
									, 999.42
									, 999.49
									, 999.55
									, 999.59
									, 999.63
									, 999.65
									, 999.66
									, 999.66
									, 999.65
									, 999.63
									, 999.59
									, 999.55
									, 999.49
									, 999.42
									, 999.33
									, 999.22
									, 999.08
									, 998.92
									, 998.72
									, 998.49
									, 998.21
									, 997.88
									, 997.48
									, 997.01
									, 996.45
									, 995.78
									, 994.98
									, 994.04
									, 992.91
									, 991.57
									, 989.98
									, 988.08
									, 985.82
									, 983.14
									, 979.95
									, 976.16
									, 971.64
									, 966.28
									, 959.89
									, 952.3
									, 943.27
									, 932.54
									, 919.77
									, 904.58
									, 886.52
									, 865.04
									, 839.49
									, 809.11
									, 772.98
									, 730.01
									, 678.91
									, 618.13
									, 545.85
									, 459.89
									, 357.65
									, 236.09
									, 91.15};
	memcpy (anal_soln,anal_data,100*sizeof(afloat));
}

// read in analytical solution, dataset 1 (Lx = 100, nx = 100, sigt = 10, sigs = 0.999)
inline void init_L2_norm_2(afloat * anal_soln){
	afloat anal_data[] = {7.592
												, 9.1071
												, 10.398
												, 11.586
												, 12.702
												, 13.763
												, 14.779
												, 15.754
												, 16.692
												, 17.598
												, 18.472
												, 19.317
												, 20.133
												, 20.923
												, 21.686
												, 22.423
												, 23.136
												, 23.824
												, 24.488
												, 25.129
												, 25.746
												, 26.34
												, 26.912
												, 27.462
												, 27.989
												, 28.495
												, 28.979
												, 29.441
												, 29.882
												, 30.303
												, 30.702
												, 31.08
												, 31.438
												, 31.775
												, 32.092
												, 32.389
												, 32.665
												, 32.921
												, 33.157
												, 33.374
												, 33.57
												, 33.747
												, 33.903
												, 34.04
												, 34.158
												, 34.256
												, 34.334
												, 34.392
												, 34.431
												, 34.451
												, 34.451
												, 34.431
												, 34.392
												, 34.334
												, 34.256
												, 34.158
												, 34.04
												, 33.903
												, 33.747
												, 33.57
												, 33.374
												, 33.157
												, 32.921
												, 32.665
												, 32.389
												, 32.092
												, 31.775
												, 31.438
												, 31.08
												, 30.702
												, 30.303
												, 29.882
												, 29.441
												, 28.979
												, 28.495
												, 27.989
												, 27.462
												, 26.912
												, 26.34
												, 25.746
												, 25.129
												, 24.488
												, 23.824
												, 23.136
												, 22.423
												, 21.686
												, 20.923
												, 20.133
												, 19.317
												, 18.472
												, 17.598
												, 16.692
												, 15.754
												, 14.779
												, 13.763
												, 12.702
												, 11.586
												, 10.398
												, 9.1071
												, 7.592};
	memcpy (anal_soln,anal_data,100*sizeof(afloat));
}


// read in analytical solution, dataset 1 (Lx = 100, nx = 1000, sigt = 10, sigs = 0.999)
inline void init_L2_norm_3(afloat * anal_soln){
  afloat anal_data[] = {19.7294847946,
  37.5591081005,
  53.9071376089,
  70.2520520756,
  86.1851290258,
  101.889851952,
  117.306636256,
  132.465382469,
  147.361217042,
  162.002249797,
  176.391501804,
  190.533816575,
  204.433237243,
  218.094010086,
  231.520204279,
  244.715858673,
  257.68492791,
  270.431304024,
  282.958810644,
  295.271205845,
  307.372183648,
  319.265373956,
  330.954345082,
  342.442603348,
  353.733595532,
  364.830708635,
  375.737272016,
  386.456557423,
  396.991780795,
  407.346102545,
  417.522629065,
  427.52441321,
  437.354455569,
  447.015705086,
  456.511060163,
  465.843369361,
  475.015432382,
  484.030000813,
  492.889779025,
  501.597424929,
  510.155550811,
  518.566724093,
  526.833468116,
  534.958262889,
  542.94354584,
  550.791712541,
  558.50511743,
  566.086074518,
  573.536858079,
  580.859703339,
  588.056807139,
  595.1303286,
  602.082389767,
  608.91507625,
  615.630437842,
  622.230489143,
  628.717210158,
  635.092546893,
  641.358411941,
  647.516685051,
  653.569213696,
  659.517813625,
  665.36426941,
  671.110334978,
  676.75773414,
  682.308161108,
  687.763281002,
  693.124730349,
  698.394117576,
  703.573023491,
  708.663001758,
  713.665579364,
  718.582257073,
  723.414509882,
  728.163787459,
  732.831514581,
  737.419091559,
  741.927894658,
  746.359276513,
  750.714566532,
  754.995071296,
  759.202074949,
  763.336839586,
  767.40060563,
  771.394592205,
  775.319997502,
  779.177999135,
  782.969754499,
  786.696401116,
  790.359056973,
  793.958820862,
  797.496772707,
  800.973973888,
  804.39146756,
  807.750278966,
  811.051415745,
  814.295868232,
  817.484609758,
  820.618596941,
  823.698769973,
  826.726052901,
  829.701353904,
  832.62556557,
  835.499565157,
  838.32421486,
  841.100362071,
  843.828839628,
  846.510466073,
  849.146045887,
  851.736369742,
  854.282214731,
  856.784344602,
  859.243509993,
  861.660448647,
  864.035885644,
  866.370533611,
  868.665092939,
  870.920251992,
  873.136687314,
  875.315063833,
  877.456035058,
  879.560243278,
  881.628319752,
  883.660884899,
  885.658548487,
  887.621909811,
  889.551557877,
  891.448071576,
  893.312019859,
  895.143961909,
  896.944447304,
  898.714016189,
  900.45319943,
  902.162518781,
  903.842487035,
  905.493608179,
  907.116377547,
  908.711281968,
  910.278799911,
  911.819401629,
  913.333549299,
  914.821697165,
  916.284291667,
  917.721771583,
  919.134568154,
  920.523105216,
  921.88779933,
  923.229059901,
  924.547289305,
  925.842883009,
  927.116229689,
  928.367711348,
  929.597703428,
  930.806574924,
  931.994688497,
  933.162400579,
  934.310061481,
  935.4380155,
  936.546601021,
  937.636150617,
  938.706991152,
  939.759443877,
  940.793824525,
  941.81044341,
  942.809605515,
  943.791610588,
  944.756753228,
  945.705322977,
  946.637604404,
  947.553877193,
  948.454416224,
  949.339491657,
  950.209369014,
  951.064309256,
  951.904568865,
  952.730399916,
  953.542050159,
  954.339763086,
  955.12377801,
  955.894330136,
  956.651650627,
  957.395966678,
  958.127501583,
  958.846474801,
  959.553102024,
  960.247595238,
  960.93016279,
  961.60100945,
  962.26033647,
  962.908341648,
  963.545219384,
  964.171160741,
  964.7863535,
  965.390982217,
  965.985228282,
  966.569269965,
  967.14328248,
  967.70743803,
  968.261905859,
  968.806852307,
  969.342440858,
  969.868832187,
  970.386184212,
  970.894652136,
  971.394388499,
  971.885543222,
  972.36826365,
  972.842694598,
  973.308978396,
  973.767254927,
  974.217661675,
  974.660333759,
  975.095403982,
  975.523002863,
  975.943258682,
  976.356297515,
  976.762243272,
  977.161217737,
  977.553340602,
  977.938729503,
  978.317500056,
  978.689765891,
  979.055638688,
  979.415228208,
  979.768642328,
  980.11598707,
  980.457366639,
  980.792883447,
  981.122638149,
  981.44672967,
  981.765255239,
  982.078310411,
  982.385989103,
  982.688383619,
  982.985584676,
  983.277681433,
  983.56476152,
  983.846911061,
  984.124214699,
  984.396755625,
  984.664615601,
  984.927874985,
  985.186612754,
  985.440906529,
  985.690832598,
  985.936465938,
  986.17788024,
  986.415147926,
  986.648340176,
  986.877526949,
  987.102777,
  987.324157903,
  987.541736072,
  987.755576782,
  987.965744182,
  988.172301324,
  988.375310174,
  988.574831634,
  988.770925561,
  988.963650783,
  989.153065117,
  989.339225386,
  989.522187439,
  989.702006164,
  989.878735506,
  990.052428484,
  990.223137206,
  990.390912883,
  990.555805849,
  990.71786557,
  990.877140666,
  991.033678917,
  991.187527285,
  991.338731925,
  991.487338197,
  991.633390684,
  991.7769332,
  991.918008809,
  992.056659832,
  992.192927865,
  992.326853789,
  992.45847778,
  992.587839325,
  992.714977234,
  992.839929647,
  992.962734049,
  993.083427282,
  993.202045554,
  993.318624449,
  993.433198942,
  993.545803405,
  993.656471618,
  993.765236782,
  993.872131527,
  993.97718792,
  994.080437479,
  994.181911178,
  994.281639459,
  994.37965224,
  994.475978926,
  994.570648413,
  994.663689103,
  994.755128908,
  994.84499526,
  994.933315117,
  995.020114977,
  995.105420879,
  995.189258415,
  995.271652735,
  995.352628558,
  995.432210177,
  995.510421465,
  995.587285887,
  995.662826501,
  995.73706597,
  995.810026565,
  995.881730174,
  995.952198308,
  996.021452108,
  996.08951235,
  996.156399451,
  996.222133477,
  996.28673415,
  996.350220848,
  996.412612618,
  996.473928177,
  996.53418592,
  996.593403924,
  996.651599954,
  996.708791469,
  996.764995627,
  996.820229288,
  996.874509023,
  996.927851115,
  996.980271567,
  997.031786105,
  997.082410183,
  997.132158989,
  997.181047447,
  997.229090223,
  997.27630173,
  997.322696132,
  997.368287347,
  997.413089052,
  997.457114688,
  997.500377462,
  997.542890353,
  997.584666115,
  997.62571728,
  997.666056164,
  997.705694868,
  997.744645284,
  997.782919097,
  997.820527789,
  997.857482643,
  997.893794745,
  997.929474989,
  997.964534078,
  997.99898253,
  998.03283068,
  998.066088682,
  998.098766514,
  998.130873978,
  998.162420708,
  998.193416166,
  998.223869652,
  998.253790302,
  998.283187091,
  998.31206884,
  998.340444211,
  998.368321718,
  998.395709724,
  998.422616445,
  998.449049954,
  998.475018179,
  998.500528913,
  998.525589808,
  998.550208381,
  998.57439202,
  998.598147978,
  998.621483383,
  998.644405234,
  998.66692041,
  998.689035663,
  998.710757629,
  998.732092825,
  998.75304765,
  998.773628391,
  998.793841223,
  998.813692209,
  998.833187304,
  998.852332357,
  998.871133112,
  998.889595208,
  998.907724185,
  998.92552548,
  998.943004435,
  998.960166292,
  998.977016201,
  998.993559217,
  999.009800301,
  999.025744328,
  999.041396079,
  999.05676025,
  999.071841451,
  999.086644206,
  999.101172955,
  999.115432057,
  999.129425791,
  999.143158353,
  999.156633864,
  999.169856367,
  999.182829828,
  999.195558139,
  999.208045119,
  999.220294513,
  999.232309997,
  999.244095175,
  999.255653583,
  999.266988688,
  999.278103891,
  999.289002526,
  999.299687862,
  999.310163106,
  999.320431401,
  999.330495825,
  999.340359399,
  999.350025083,
  999.359495774,
  999.368774316,
  999.37786349,
  999.386766025,
  999.39548459,
  999.404021802,
  999.412380221,
  999.420562355,
  999.428570658,
  999.436407534,
  999.444075332,
  999.451576354,
  999.45891285,
  999.466087021,
  999.473101018,
  999.479956947,
  999.486656863,
  999.493202777,
  999.499596653,
  999.505840409,
  999.511935917,
  999.517885007,
  999.523689463,
  999.529351027,
  999.534871397,
  999.540252229,
  999.545495137,
  999.550601694,
  999.555573433,
  999.560411844,
  999.56511838,
  999.569694451,
  999.574141432,
  999.578460656,
  999.582653418,
  999.586720977,
  999.590664554,
  999.59448533,
  999.598184452,
  999.60176303,
  999.605222138,
  999.608562813,
  999.611786057,
  999.614892838,
  999.617884088,
  999.620760703,
  999.623523546,
  999.626173448,
  999.628711202,
  999.63113757,
  999.63345328,
  999.635659026,
  999.637755471,
  999.639743243,
  999.641622938,
  999.643395121,
  999.645060322,
  999.646619043,
  999.648071749,
  999.649418878,
  999.650660833,
  999.651797987,
  999.65283068,
  999.653759224,
  999.654583895,
  999.655304943,
  999.655922582,
  999.656436998,
  999.656848347,
  999.65715675,
  999.657362301,
  999.657465061,
  999.657465061,
  999.657362301,
  999.65715675,
  999.656848347,
  999.656436998,
  999.655922582,
  999.655304943,
  999.654583895,
  999.653759224,
  999.65283068,
  999.651797987,
  999.650660833,
  999.649418878,
  999.648071749,
  999.646619043,
  999.645060322,
  999.643395121,
  999.641622938,
  999.639743243,
  999.637755471,
  999.635659026,
  999.63345328,
  999.63113757,
  999.628711202,
  999.626173448,
  999.623523546,
  999.620760703,
  999.617884088,
  999.614892838,
  999.611786057,
  999.608562813,
  999.605222138,
  999.60176303,
  999.598184452,
  999.59448533,
  999.590664554,
  999.586720977,
  999.582653418,
  999.578460656,
  999.574141432,
  999.569694451,
  999.56511838,
  999.560411844,
  999.555573433,
  999.550601694,
  999.545495137,
  999.540252229,
  999.534871397,
  999.529351027,
  999.523689463,
  999.517885007,
  999.511935917,
  999.505840409,
  999.499596653,
  999.493202777,
  999.486656863,
  999.479956947,
  999.473101018,
  999.466087021,
  999.45891285,
  999.451576354,
  999.444075332,
  999.436407534,
  999.428570658,
  999.420562355,
  999.412380221,
  999.404021802,
  999.39548459,
  999.386766025,
  999.37786349,
  999.368774316,
  999.359495774,
  999.350025083,
  999.340359399,
  999.330495825,
  999.320431401,
  999.310163106,
  999.299687862,
  999.289002526,
  999.278103891,
  999.266988688,
  999.255653583,
  999.244095175,
  999.232309997,
  999.220294513,
  999.208045119,
  999.195558139,
  999.182829828,
  999.169856367,
  999.156633865,
  999.143158353,
  999.129425791,
  999.115432057,
  999.101172955,
  999.086644206,
  999.071841451,
  999.05676025,
  999.041396079,
  999.025744328,
  999.009800301,
  998.993559217,
  998.977016201,
  998.960166292,
  998.943004435,
  998.92552548,
  998.907724185,
  998.889595208,
  998.871133112,
  998.852332357,
  998.833187304,
  998.813692209,
  998.793841223,
  998.773628391,
  998.75304765,
  998.732092825,
  998.710757629,
  998.689035663,
  998.66692041,
  998.644405234,
  998.621483383,
  998.598147978,
  998.57439202,
  998.550208381,
  998.525589808,
  998.500528913,
  998.475018179,
  998.449049954,
  998.422616445,
  998.395709724,
  998.368321718,
  998.340444211,
  998.31206884,
  998.283187091,
  998.253790302,
  998.223869652,
  998.193416166,
  998.162420708,
  998.130873978,
  998.098766514,
  998.066088682,
  998.03283068,
  997.99898253,
  997.964534078,
  997.929474989,
  997.893794745,
  997.857482643,
  997.820527789,
  997.782919097,
  997.744645284,
  997.705694868,
  997.666056164,
  997.62571728,
  997.584666115,
  997.542890353,
  997.500377462,
  997.457114688,
  997.413089052,
  997.368287347,
  997.322696132,
  997.27630173,
  997.229090223,
  997.181047447,
  997.132158989,
  997.082410183,
  997.031786105,
  996.980271567,
  996.927851115,
  996.874509023,
  996.820229288,
  996.764995627,
  996.708791469,
  996.651599954,
  996.593403924,
  996.53418592,
  996.473928177,
  996.412612618,
  996.350220848,
  996.28673415,
  996.222133477,
  996.156399451,
  996.08951235,
  996.021452108,
  995.952198308,
  995.881730174,
  995.810026565,
  995.73706597,
  995.662826501,
  995.587285887,
  995.510421465,
  995.432210177,
  995.352628558,
  995.271652735,
  995.189258415,
  995.105420879,
  995.020114977,
  994.933315117,
  994.84499526,
  994.755128908,
  994.663689103,
  994.570648413,
  994.475978926,
  994.37965224,
  994.281639459,
  994.181911178,
  994.080437479,
  993.97718792,
  993.872131527,
  993.765236782,
  993.656471618,
  993.545803405,
  993.433198942,
  993.318624449,
  993.202045554,
  993.083427282,
  992.962734049,
  992.839929647,
  992.714977234,
  992.587839325,
  992.45847778,
  992.326853789,
  992.192927865,
  992.056659832,
  991.918008808,
  991.7769332,
  991.633390684,
  991.487338197,
  991.338731925,
  991.187527285,
  991.033678917,
  990.877140666,
  990.71786557,
  990.555805849,
  990.390912883,
  990.223137206,
  990.052428484,
  989.878735506,
  989.702006164,
  989.522187439,
  989.339225386,
  989.153065117,
  988.963650783,
  988.770925561,
  988.574831634,
  988.375310174,
  988.172301324,
  987.965744182,
  987.755576782,
  987.541736072,
  987.324157903,
  987.102777,
  986.877526949,
  986.648340176,
  986.415147926,
  986.17788024,
  985.936465938,
  985.690832598,
  985.440906529,
  985.186612754,
  984.927874985,
  984.664615601,
  984.396755625,
  984.124214699,
  983.846911061,
  983.56476152,
  983.277681433,
  982.985584676,
  982.688383619,
  982.385989103,
  982.078310411,
  981.765255239,
  981.44672967,
  981.122638149,
  980.792883447,
  980.457366639,
  980.11598707,
  979.768642328,
  979.415228208,
  979.055638688,
  978.689765891,
  978.317500056,
  977.938729503,
  977.553340602,
  977.161217737,
  976.762243272,
  976.356297515,
  975.943258682,
  975.523002863,
  975.095403982,
  974.660333759,
  974.217661675,
  973.767254927,
  973.308978396,
  972.842694598,
  972.36826365,
  971.885543222,
  971.394388499,
  970.894652136,
  970.386184212,
  969.868832187,
  969.342440858,
  968.806852307,
  968.261905859,
  967.70743803,
  967.14328248,
  966.569269965,
  965.985228282,
  965.390982217,
  964.7863535,
  964.171160741,
  963.545219384,
  962.908341648,
  962.26033647,
  961.60100945,
  960.93016279,
  960.247595238,
  959.553102024,
  958.846474801,
  958.127501583,
  957.395966678,
  956.651650627,
  955.894330136,
  955.12377801,
  954.339763086,
  953.542050159,
  952.730399916,
  951.904568865,
  951.064309256,
  950.209369014,
  949.339491657,
  948.454416224,
  947.553877193,
  946.637604404,
  945.705322977,
  944.756753228,
  943.791610588,
  942.809605515,
  941.81044341,
  940.793824525,
  939.759443877,
  938.706991152,
  937.636150617,
  936.546601021,
  935.4380155,
  934.310061481,
  933.162400579,
  931.994688497,
  930.806574924,
  929.597703428,
  928.367711348,
  927.116229689,
  925.842883009,
  924.547289305,
  923.229059901,
  921.88779933,
  920.523105216,
  919.134568154,
  917.721771583,
  916.284291667,
  914.821697165,
  913.333549299,
  911.819401629,
  910.278799911,
  908.711281968,
  907.116377547,
  905.493608179,
  903.842487035,
  902.162518781,
  900.45319943,
  898.714016189,
  896.944447304,
  895.143961909,
  893.312019859,
  891.448071576,
  889.551557877,
  887.621909811,
  885.658548487,
  883.660884899,
  881.628319752,
  879.560243278,
  877.456035058,
  875.315063833,
  873.136687314,
  870.920251992,
  868.665092939,
  866.370533611,
  864.035885644,
  861.660448647,
  859.243509993,
  856.784344602,
  854.282214731,
  851.736369742,
  849.146045887,
  846.510466073,
  843.828839628,
  841.100362071,
  838.32421486,
  835.499565157,
  832.62556557,
  829.701353904,
  826.726052901,
  823.698769973,
  820.618596941,
  817.484609758,
  814.295868232,
  811.051415745,
  807.750278966,
  804.39146756,
  800.973973888,
  797.496772707,
  793.958820862,
  790.359056973,
  786.696401116,
  782.969754499,
  779.177999135,
  775.319997502,
  771.394592205,
  767.40060563,
  763.336839586,
  759.202074949,
  754.995071296,
  750.714566532,
  746.359276513,
  741.927894658,
  737.419091559,
  732.831514581,
  728.163787459,
  723.414509882,
  718.582257073,
  713.665579364,
  708.663001758,
  703.573023491,
  698.394117576,
  693.124730349,
  687.763281002,
  682.308161108,
  676.75773414,
  671.110334978,
  665.36426941,
  659.517813625,
  653.569213696,
  647.516685051,
  641.358411941,
  635.092546893,
  628.717210158,
  622.230489143,
  615.630437842,
  608.91507625,
  602.082389767,
  595.1303286,
  588.056807139,
  580.859703339,
  573.536858079,
  566.086074518,
  558.50511743,
  550.791712541,
  542.94354584,
  534.958262889,
  526.833468116,
  518.566724093,
  510.155550811,
  501.597424929,
  492.889779025,
  484.030000813,
  475.015432382,
  465.843369361,
  456.511060163,
  447.015705086,
  437.354455569,
  427.52441321,
  417.522629065,
  407.346102545,
  396.991780795,
  386.456557423,
  375.737272016,
  364.830708635,
  353.733595532,
  342.442603348,
  330.954345082,
  319.265373956,
  307.372183648,
  295.271205845,
  282.958810644,
  270.431304024,
  257.68492791,
  244.715858673,
  231.520204279,
  218.094010086,
  204.433237243,
  190.533816575,
  176.391501804,
  162.002249797,
  147.361217042,
  132.465382469,
  117.306636256,
  101.889851952,
  86.1851290258,
  70.2520520756,
  53.9071376089,
  37.5591081005,
  19.7294847946};
	memcpy (anal_soln,anal_data,1000*sizeof(afloat));
}

// compare the generated solution with an analytical one (L2 norm)
inline pfloat l2_norm_cmp(afloat * phis, afloat * anal_soln, int numCells, pfloat dx){
  afloat sratio,temp;
	int i;
	sratio = 0.0;
	for (i = 0; i < numCells; i++){
	       temp = fabs(anal_soln[i] - phis[i]) / fabs(anal_soln[i]);
	       sratio += temp * temp;
	} 
	//printf("L2: %f\n", dx*sratio);
	return dx * sratio;
}

#endif /* __QDAMC_UTILS_H__ */
